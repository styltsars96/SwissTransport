/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Storage.DataBase;
import basics.City;
import basics.ComplexConn;
import basics.Connections;
import basics.Country;
import basics.DirConnection;
import java.util.ArrayList;
import java.util.Hashtable;
import javax.swing.DefaultListModel;

/**
 *
 * @author Lazaros
 */
public class DLFrame extends javax.swing.JFrame {
    private static Country swiss;//A container for cities.
    private static Connections conn;//Utility for connection making.
    private static boolean DBstatus = false;
    /**
     * Creates new form DLFrame
     */
    DefaultListModel FromListModel,ToListModel;
    
    public DLFrame(Country swiss) {
        //Initialization.
        //Lists of suggested cities.
        FromListModel =new DefaultListModel();
        ToListModel =new DefaultListModel();
        this.swiss = swiss;
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);//The close button closes only the window.
        this.conn = new Connections(swiss.getCityHash());//Connections utility initialization.
        for(City i : swiss.getCities()){//Get all names of cities for elements
            FromListModel.addElement(i.getName());
            ToListModel.addElement(i.getName());
        }
        //Create and check DB connection.
        DataBase.connect();
        if(DataBase.isConnected()){
            this.DBstatus = true;
            ArrayList<DirConnection> dc = new ArrayList();//A temporary holder for direct connections.
            dc = DataBase.readConnectionsFromDB();
            conn.resetConn(dc);//Put direct connections from DB
        }
        initComponents();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        ToTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FromTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        FromList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        ToList = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        CheckButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Console2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("City Link Finder");
        setMaximumSize(new java.awt.Dimension(400, 301));
        setMinimumSize(new java.awt.Dimension(400, 301));
        setResizable(false);

        jLabel1.setText("Insert two names of cities:");

        ToTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ToTextFieldMouseClicked(evt);
            }
        });
        ToTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ToTextFieldKeyTyped(evt);
            }
        });

        jLabel3.setText("TO:");

        jLabel2.setText("FROM:");

        FromTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FromTextFieldMouseClicked(evt);
            }
        });
        FromTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FromTextFieldKeyTyped(evt);
            }
        });

        FromList.setModel(FromListModel);
        FromList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FromListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(FromList);

        ToList.setModel(ToListModel);
        ToList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ToListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(ToList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 103, Short.MAX_VALUE))
                    .addComponent(FromTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(ToTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        CheckButton.setText("Check!");
        CheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        ClearButton.setText("Clear!");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CheckButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CheckButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ClearButton)
                .addContainerGap())
        );

        Console2.setColumns(20);
        Console2.setRows(5);
        jScrollPane1.setViewportView(Console2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(63, 63, 63))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckButtonActionPerformed
        // TODO add your handling code here:
        //When prompted to check for connections...
        Hashtable names = swiss.getNameHash();//A hash of Cities with names as keys gets ready so...
        //City Objects are taken.
        if(FromTextField.getText() == ToTextField.getText()){
            Console2.append("This is the same City!");
            return;
        }
        City from =(City) names.get(FromTextField.getText());//Start
        City to =(City) names.get(ToTextField.getText());//Destination
        if(from==null || to==null){
            Console2.append("At least one of the Cities does not exist!");
            return;
        }
        //First, DB is checked. DB returns true if there is indeed a direct connection.
        if(!DataBase.isConnected() && DBstatus == true)DataBase.connect();
        boolean con = false;
        if(con==false){
            Object o = null;
            try{
                o = conn.quickCheck(from, to);//Check the API for connection.
            }catch(NullPointerException ex){
                Console2.append("Anomally detected in connection between"+from.getName()+" and "+to.getName());
            }
            
            if(o instanceof DirConnection){//If connection is direct...
                con = true;//Set con true...
                if (DataBase.isConnected()) DataBase.addConnToDB((DirConnection) o);//and add direct connection to the database.
            }else{//If it is not direct, print the connection.
                ComplexConn cc = (ComplexConn) o;
                Console2.append(cc+"\n");
                //Add the direct connections it contains to DB...
                ArrayList<DirConnection> con2 = conn.getDirConn();
                if(DataBase.isConnected()) for(DirConnection j : con2){
                    DataBase.addConnToDB(j);
                }
            }
            
        }
        //Set text fields empty.
        FromTextField.setText("");
        ToTextField.setText("");
        if(DBstatus ==true) DataBase.disconnect();//Disconnect from DataBase.
        if(con){//Print message about the link.
            Console2.append(from.getName()+" and "+to.getName()+" have a direct link!\n");
        }else{
            Console2.append(from.getName()+" and "+to.getName()+" have a non-direct link!\n");
        }
        
    }//GEN-LAST:event_CheckButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        // TODO add your handling code here:
        Console2.setText("");//Clears the output text.
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // TODO add your handling code here:
       DataBase.disconnect();//Disconnect from DataBase.
       dispose();//Closes window.
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void FromTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FromTextFieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_FromTextFieldMouseClicked

    private void ToTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ToTextFieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ToTextFieldMouseClicked

    private void FromTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FromTextFieldKeyTyped
        // TODO add your handling code here:
        //When users start wirting... written text is used...
        String s =FromTextField.getText()+evt.getKeyChar();
        //The list is emptied...
        FromListModel.clear();
        //to be filled with the citie names that start with whatever the user has written.
        for(City i: swiss.getCities()){
               if( i.getName().startsWith(s)){
                   FromListModel.addElement(i.getName());
               }   
        }
    }//GEN-LAST:event_FromTextFieldKeyTyped

    private void FromListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FromListMouseClicked
        // TODO add your handling code here:
        //Set text filed to the option that is clicked.
        FromTextField.setText(FromList.getSelectedValue());
    }//GEN-LAST:event_FromListMouseClicked

    private void ToListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ToListMouseClicked
        // TODO add your handling code here:
        //Set text filed to the option that is clicked.
        ToTextField.setText(ToList.getSelectedValue());
    }//GEN-LAST:event_ToListMouseClicked

    private void ToTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ToTextFieldKeyTyped
        // TODO add your handling code here:
        //Exactly the same logic as FromTextFieldKeyTyped() event.
        String s =ToTextField.getText()+evt.getKeyChar();
        ToListModel.clear();
        for(City i: swiss.getCities()){
               if( i.getName().startsWith(s)){
                   ToListModel.addElement(i.getName());
               }   
        } 
    }//GEN-LAST:event_ToTextFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //Starts the frame...
                new DLFrame(swiss).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton CheckButton;
    private javax.swing.JButton ClearButton;
    private javax.swing.JTextArea Console2;
    private javax.swing.JList<String> FromList;
    private javax.swing.JTextField FromTextField;
    private javax.swing.JList<String> ToList;
    private javax.swing.JTextField ToTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
